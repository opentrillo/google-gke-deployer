apiVersion: apps/v1
kind: Deployment
metadata:
  name: trillo-rt
  namespace: $namespace
  labels:
    app: trillo-rt
spec:
  replicas: 2
  template:
    metadata:
      name: trillo-rt
      namespace: $namespace
      labels:
        app: trillo-rt
    spec:
      serviceAccountName: trillo-rt
      containers:
        - name: trillo-rt
          image: $trilloRTImage
          imagePullPolicy: IfNotPresent
          env:
            - name: DATA_SERVICE_URL
              value: https://trillo-ds.$namespace.svc.cluster.local
            - name: CONTAINER_ORCHESTRATOR
              value: GKE
            - name: REDIS_CREDENTIALS
              value: $redisCachePassword
            - name: AGENT_LOCAL_PORT
              value: "6080"
          ports:
            - containerPort: 8020
              name: trillo-rt
          volumeMounts:
            - name: trillo-repo
              mountPath: /trillo-repo
            - name: trillo-rt-appdata
              mountPath: /trillo-rt-appdata
          livenessProbe:
            initialDelaySeconds: 180
            httpGet:
              scheme: HTTPS
              port: 8020
              path: /_healthcheck
          readinessProbe:
            initialDelaySeconds: 180
            httpGet:
              scheme: HTTPS
              port: 8020
              path: /_healthcheck
        - image: gcr.io/cloud-marketplace-tools/metering/ubbagent
          name: ubbagent
          env:
            - name: AGENT_CONFIG_FILE
              value: /etc/ubbagent/config.yaml
            - name: AGENT_LOCAL_PORT
              value: "6080"
            - name: AGENT_STATE_DIR
              value: /var/lib/ubbagent
            - name: AGENT_REPORT_DIR
              value: /var/lib/ubbagent/reports
            - name: AGENT_ENCODED_KEY
              value: ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAiY2xvdWQtbWFya2V0cGxhY2UtdG9vbHMiLAogICJwcml2YXRlX2tleV9pZCI6ICJmNGZiMGQ2MzNhZDQ3YjEwZTJhNDRjM2ZjMGZiYjA3NTk4NzgyY2JjIiwKICAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdkFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLWXdnZ1NpQWdFQUFvSUJBUUN6MG9iVmxtVjA4MFVoXG5uY3h0d2dyTU1JNmd0K2NhNlRqdk4vbk5naDFudk1UMXR0NnptYjZCMGI0Sk1vWExHN2pjL3F5OWJLa0tDOFA2XG5lWDJjWnA1ZEhOUlBFUExUYzFWTnBWY3BPNmQxUXRsVm9NYWUzVmMyMlF3MzBCalNHS1MvWE9Wb2RsTytQLzY3XG5xM1FaT3pZbjE4MjA2OFd3L0VlT3E3YmFvT3BieVRDRVQ2RTcrOG8raU1ET1JIZW5rMTRrMkZ6R24zK2NqOUZIXG5TNHFCL1dSKzQxZm5lNW91NU5JSXE0aWVYVWdlNzZ6OFYxZDN1dWF5cFhhY0NtTCtMZFVyYXY1b0RIN3lESUJ6XG5MaGFGS29lSGJ6RFpTdGdSaUJpVjZFbzZhTWxuN0NwTGxqbVNPdGorbVNSbHYzdEU2blU5N1ZqOEptaWNCQ3pWXG5JdDluNHRzSEFnTUJBQUVDZ2dFQUJSbnFwNklweEZJUnV0STlBT1laZVZFWC9XT0tMbFRCditPTGRoMkQvbDZOXG5ZSUpzdWVxWmRzUlU5WnpWelNlL0FhSHdrNC9DdklnTjZndjFRM0VUMEFTOUx5QmJkYzByOVNwdmJtVGFBTXBzXG5oa1hXZ2ZPUExGS205VDhLM1RidXdZWlRTYmlGblZHTkdwVFN2bjUrc0UycWNSWDVMZWFubEZxM0NCSmxqa1NsXG5aY08rUnNEUjRQNDBFUWUwaWQxazNTYW9JMHRBS0taNGNCbGRhS1JBVFRXNHBzNkdvSG9yOVI2NDBYY1ZRSzlWXG5lTlJPamMwTmltRnlKUWZUS2NXaUxIMVhiQTRUQ29GV0hOdUNlL2hWUVRSVnJSOXVoMXVUSnB5UG40QkMzZnpSXG5NdHFyNXlhTG5ybTMyY0Qrb0YrVnZYN1JlVmtMZnZMSk5DVURTOEF1cVFLQmdRRDA4N2RHUFJhTWJGOUV5bmVqXG45S3RqSlNBclhzYmJwblJQRzlSa0FUSTlGaXBtTFpaczRTaDc5OWdYNVdPNXRVNldBYVVqTUR1M3pzTGZCNCtPXG5NNE9MQml0L3kwVzFBZlM0TUY2TmpmcElaSUlsOWk1Z0JLUnBFQXB0dmVtSW9GZFlRY0xTb2F0SFJlcHBlN2liXG5iMHFnYi9UVnNFYXhhZ1B2KzhIN3pEcUZXUUtCZ1FDNzdzNUg0UjN1WDRUS3JROWU0SVFNNm9qUEIxQk9EWG1jXG5reTJCUG5LclNBb1cycllZRXpnNXpFQmpyendsOU1nK0lhQXVubS9ydENFZ0o2S2ZKVXdYQ3hWcTZjV21yVHhCXG5hQ2ZHTEozai85alhNQ2tHT2tUYUhUdjllcHUwbC90ZzM5NkxCSUxMaWhnOW96UVozbHlrazdHOXhYcmFEbW5nXG5KTEQ5a3NkM1h3S0JnRWNxL0NmREhlY0VvWlZhQWZLMzVvZXl4S3IxS1crdDZBTUlBZWhnVkpsYzlFcWxtaHZlXG5PeVh4ZDI1UjdteUpXZURKYjVKT3REc09McDRnRXp4c2lSNStWMnNVd3hiNUQ0SG9ROEI2N0tuVjBkNTNyVGVtXG5nYUlveis3Y2k1cHZnNUVYNGlQU1p2SVpSU2NLbEROTTNYREp0bWZUaEdhTmQ4Rms4eEpXWHZaWkFvR0FZUE04XG5SWWFUMjFJNWZoa3pVYjIvUWE2SWIwMFZsMzZLRzBVdDkzdlF5aDI2M3JscnNSWFJMcmY1QzdQdDhxTEozb3VZXG5TQlNDSm5WaGxXWDlGZDYyMXpobmp5VVVTdjBabGFCMnpGeGVBNjRNSGs4QkN1NXFjSjhlUUpETTNLaC9EU1hRXG5kNlVYR0l1Z0g4UWU3NjF2MjVNNTRXMk1DQXZoZ0xsTStUT01aVDhDZ1lCcjV5R1piMlBGZitKbWZmTU1ENE56XG5lbEp1S1JlYzRielpsNFBGQ1c3OHpJMi9DZTZjOHRnWGN0OEptTUM2R2kxaERCMS8vZlZISjcxRnlSYjBIYXVPXG5TWHZ2VXQ1OGEvL1Bsc1ZUbGNucGJ2UEVRRTY0SjZ6UjlnK0RLNWhEOGo4UUxVaFhkdHFYYjVhUXA4QzlzNG5PXG5icURQZ3VoL0tJaVA1WSthUE9laG53PT1cbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsCiAgImNsaWVudF9lbWFpbCI6ICJ4eHgtZmFrZS1yZXBvcnRlci14eHhAY2xvdWQtbWFya2V0cGxhY2UtdG9vbHMuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTA1ODYyMDM3ODQ1Mjk5NzI3ODIzIiwKICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLAogICJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwKICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS94eHgtZmFrZS1yZXBvcnRlci14eHglNDBjbG91ZC1tYXJrZXRwbGFjZS10b29scy5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIKfQ==
            - name: AGENT_CONSUMER_ID
              value: project:pr-xxxx-fake-xxxx
          volumeMounts:
            - name: ubbagent-config
              mountPath: /etc/ubbagent
            - name: ubbagent-state
              mountPath: /var/lib/ubbagent
      restartPolicy: Always
      volumes:
        - name: ubbagent-config
          configMap:
            name: agent-config
        - name: ubbagent-state
          emptyDir: {}
        - name: trillo-repo
          nfs:
            server: repo-nfs.$namespace.svc.cluster.local
            path: /
        - name: trillo-rt-appdata
          nfs:
            server: appdata-nfs.$namespace.svc.cluster.local
            path: /
  selector:
    matchLabels:
      app: trillo-rt
---
apiVersion: v1
kind: Service
metadata:
  name: trillo-rt
  namespace: $namespace
  annotations:
    cloud.google.com/app-protocols: '{"my-https-port":"HTTPS"}'
spec:
  type: NodePort
  selector:
    app: trillo-rt
  ports:
    - name: my-https-port
      protocol: TCP
      port: 443
      targetPort: 8020
---
apiVersion: v1
kind: Secret
metadata:
  name: $name-tls-secret
  labels:
    app.kubernetes.io/name: "$name"
    app.kubernetes.io/component: tls-secret
data:
  tls.key: "$base64EncodedPrivateKey"
  tls.crt: "$base64EncodedCertificate"
type: kubernetes.io/tls
